package com.eli.oneos.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eli.oneos.db.greendao.TransferHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRANSFER_HISTORY.
*/
public class TransferHistoryDao extends AbstractDao<TransferHistory, Long> {

    public static final String TABLENAME = "TRANSFER_HISTORY";

    /**
     * Properties of entity TransferHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property SrcPath = new Property(4, String.class, "srcPath", false, "SRC_PATH");
        public final static Property ToPath = new Property(5, String.class, "toPath", false, "TO_PATH");
        public final static Property Size = new Property(6, Long.class, "size", false, "SIZE");
        public final static Property Length = new Property(7, Long.class, "length", false, "LENGTH");
        public final static Property Duration = new Property(8, Long.class, "duration", false, "DURATION");
        public final static Property Time = new Property(9, Long.class, "time", false, "TIME");
        public final static Property IsComplete = new Property(10, Boolean.class, "isComplete", false, "IS_COMPLETE");
    };


    public TransferHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public TransferHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSFER_HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UID' INTEGER," + // 1: uid
                "'TYPE' INTEGER," + // 2: type
                "'NAME' TEXT NOT NULL ," + // 3: name
                "'SRC_PATH' TEXT NOT NULL ," + // 4: srcPath
                "'TO_PATH' TEXT NOT NULL ," + // 5: toPath
                "'SIZE' INTEGER," + // 6: size
                "'LENGTH' INTEGER," + // 7: length
                "'DURATION' INTEGER," + // 8: duration
                "'TIME' INTEGER," + // 9: time
                "'IS_COMPLETE' INTEGER);"); // 10: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSFER_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
        stmt.bindString(4, entity.getName());
        stmt.bindString(5, entity.getSrcPath());
        stmt.bindString(6, entity.getToPath());
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(7, size);
        }
 
        Long length = entity.getLength();
        if (length != null) {
            stmt.bindLong(8, length);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(9, duration);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time);
        }
 
        Boolean isComplete = entity.getIsComplete();
        if (isComplete != null) {
            stmt.bindLong(11, isComplete ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransferHistory readEntity(Cursor cursor, int offset) {
        TransferHistory entity = new TransferHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.getString(offset + 3), // name
            cursor.getString(offset + 4), // srcPath
            cursor.getString(offset + 5), // toPath
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // size
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // length
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // time
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isComplete
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransferHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setSrcPath(cursor.getString(offset + 4));
        entity.setToPath(cursor.getString(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLength(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDuration(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setIsComplete(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TransferHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TransferHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
