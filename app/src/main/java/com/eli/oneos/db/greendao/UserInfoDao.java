package com.eli.oneos.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eli.oneos.db.greendao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Mac = new Property(2, String.class, "mac", false, "MAC");
        public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
        public final static Property Admin = new Property(4, Integer.class, "admin", false, "ADMIN");
        public final static Property Uid = new Property(5, Integer.class, "uid", false, "UID");
        public final static Property Gid = new Property(6, Integer.class, "gid", false, "GID");
        public final static Property Domain = new Property(7, Integer.class, "domain", false, "DOMAIN");
        public final static Property Time = new Property(8, Long.class, "time", false, "TIME");
        public final static Property IsLogout = new Property(9, Boolean.class, "isLogout", false, "IS_LOGOUT");
        public final static Property IsActive = new Property(10, Boolean.class, "isActive", false, "IS_ACTIVE");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'MAC' TEXT NOT NULL ," + // 2: mac
                "'PWD' TEXT NOT NULL ," + // 3: pwd
                "'ADMIN' INTEGER," + // 4: admin
                "'UID' INTEGER," + // 5: uid
                "'GID' INTEGER," + // 6: gid
                "'DOMAIN' INTEGER," + // 7: domain
                "'TIME' INTEGER," + // 8: time
                "'IS_LOGOUT' INTEGER," + // 9: isLogout
                "'IS_ACTIVE' INTEGER);"); // 10: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getMac());
        stmt.bindString(4, entity.getPwd());
 
        Integer admin = entity.getAdmin();
        if (admin != null) {
            stmt.bindLong(5, admin);
        }
 
        Integer uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(6, uid);
        }
 
        Integer gid = entity.getGid();
        if (gid != null) {
            stmt.bindLong(7, gid);
        }
 
        Integer domain = entity.getDomain();
        if (domain != null) {
            stmt.bindLong(8, domain);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(9, time);
        }
 
        Boolean isLogout = entity.getIsLogout();
        if (isLogout != null) {
            stmt.bindLong(10, isLogout ? 1l: 0l);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(11, isActive ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // mac
            cursor.getString(offset + 3), // pwd
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // admin
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // uid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // gid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // domain
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isLogout
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setMac(cursor.getString(offset + 2));
        entity.setPwd(cursor.getString(offset + 3));
        entity.setAdmin(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setGid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDomain(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsLogout(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsActive(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
